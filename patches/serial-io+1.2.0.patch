diff --git a/node_modules/serial-io/lib/connection.js b/node_modules/serial-io/lib/connection.js
index 40780ec..a0c5cf1 100644
--- a/node_modules/serial-io/lib/connection.js
+++ b/node_modules/serial-io/lib/connection.js
@@ -46,16 +46,18 @@ class Connection {
   send (content, opts) {
     if (this.state !== Connection.states().OPEN) {
       return Promise.reject(new Error('instance not in state OPEN'))
-    } else if (typeof content !== 'string') {
-      return Promise.reject(new Error('first argument must be a string'))
+    } else if (typeof content !== 'string' && !Buffer.isBuffer(content)) {
+      return Promise.reject(new Error('first argument must be a string or a Buffer'))
     }
     opts = opts || {}
     const terminator = opts.terminator || ''
-    const timeoutInit = opts.timeoutInit || 100
-    const timeoutRolling = opts.timeoutRolling || 10
+    const timeoutInit = opts.timeoutInit || 1000
+    const timeoutRolling = opts.timeoutRolling || 1000
+    const fixedRespBytesLength = opts.fixedRespBytesLength || -1
 
     this.state = Connection.states().INUSE
-    let chunks = ''
+    let chunks = []
+    let bytes = []
     let timer
 
     return new Promise((resolve, reject) => {
@@ -65,11 +67,12 @@ class Connection {
           timer = null
         }
         chunks = chunks.concat(data)
+        bytes.push(data.toString("hex").toUpperCase())
         if (terminator) {
           const ix = chunks.indexOf(terminator)
-          if (ix > 0 && ix === chunks.length + 1) {
+          if (bytes.length >= fixedRespBytesLength || (fixedRespBytesLength === -1 && ix > 0 && ix === chunks.length + 1)) {
             this.state = Connection.states().OPEN
-            resolve(chunks)
+            resolve(fixedRespBytesLength > 0 ? bytes.join("") : chunks)
           } else if (ix > 0 && ix !== chunks.length + 1) {
             this.state = Connection.states().ERROR
             reject(new Error('Terminator detected in the middle of answer. Check your options'))
@@ -77,7 +80,7 @@ class Connection {
           }
         }
         timer = setTimeout(() => {
-          resolve(chunks)
+          resolve(fixedRespBytesLength > 0 ? bytes.join("") : chunks)
         }, timeoutRolling)
       })
 
@@ -86,7 +89,7 @@ class Connection {
           reject(new Error(err))
         }
         timer = setTimeout(() => {
-          resolve(chunks)
+          resolve(fixedRespBytesLength > 0 ? bytes.join("") : chunks)
         }, timeoutInit)
       })
     })
